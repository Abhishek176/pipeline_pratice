import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput;

properties([
    parameters([
        string(defaultValue: 'Develop', description: 'Enter the git branch name', name: 'branch', trim: false), 
        string(defaultValue: '', description: 'Enter account number', name: 'account', trim: true), 
        string(defaultValue: 'us-east-1', description: 'Enter Region', name: 'region', trim: false), 
        string(defaultValue: '', description: 'instance ID, whose volumes to re-encrypt', name: 'instance_id', trim: false), 
        string(defaultValue: '', description: 'The value of the new CMK alias to use, if one is not found, a new one will be created', name: 'new_kms_key_alias', trim: false), 
        booleanParam(defaultValue: false, description: 'When checked, this automation will delete the original volumes', name: 'delete_original_volumes'), 
        booleanParam(defaultValue: true, description: 'When checked, this automation will restart the EC2 instance', name: 'restart_instance'), 
        booleanParam(defaultValue: true, description: 'When checked, this automation will display the remediation plan without taking any action', name: 'preview')
    ])
])

node ('CLDOPS') {
    stage('SCM') {
        //set up proxy
        env.http_proxy = 'http://proxy.us-east-1.appqa.dtcc.org:8080'
        env.https_proxy = 'http://proxy.us-east-1.appqa.dtcc.org:8080'
        env.NO_PROXY   = '169.254.169.254,repo.dtcc.com,idbd.dtcc.com'
        deleteDir()

                git url: 'ssh://git@code.dtcc.com:7999/cpe/ccoe-remediation-app.git',branch: "${params.branch}"
                WORKSPACE  = env.WORKSPACE
                env.account ="${params.account}"
        assumeRole("${params.account}","Ops-automation-role",43200)

                preview_flag = ""
                delete_volume_flag = ""
                start_instance_flag = ""

                if ("${params.delete_original_volumes}" == "true")
                    env.delete_volume_flag = "-delete-original-volumes"
                if ("${params.restart_instance}" == "true")
                    env.start_instance_flag = "-start-instance"
                if ("${params.preview}" == "true")
                    env.preview_flag = "-preview"
          
        sh '''
            python3 -m venv venv
            source venv/bin/activate
            cd src
            which python3
            python -m pip -q install -r requirements.txt

            echo "About to remediate all volumes attached to instance ${instance_id}"

            python volume_remediator.py -instance_id ${params.instance_id} -region ${params.region} -volume-encryption-cmk-alias ${params.new_kms_key_alias} \$delete_volume_flag \$start_instance_flag \$preview_flag
          '''
          
    }
    
}
def assumeRole(String accountId,String roleName,Integer durationSeconds) {
    assumeRoleARN = "arn:aws:iam::$accountId:role/$roleName"
    String assumeRoleResponseJson = sh returnSdout: true , script: "aws sts assume-role --duration-seconds 43200 --role-arn $assumeRoleARN --role-session-name  tsmci-jenkins-session"
    assumeRoleResponse = new JsonSlurperClassic().parseText(assumeRoleResponseJson)
    env.AWS_ACCESS_KEY_ID = assumeRoleResponse.Credentials.AccesskeyId
    env.AWS_SECRET_ACCESS_KEY assumeRoleResponse.Credentials.SecretAccessKey
    env.AWS_SESSION_TOKEN =assumeRoleResponse.Credentials.SessionToken
    env.AWS_DEFAULT_REGION ='us-east-1'

}
